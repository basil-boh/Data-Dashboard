{"ast":null,"code":"var _jsxFileName = \"/Users/basil/Data-Dashboard/src/components/ExportOptions.js\";\nimport React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExportOptions = ({\n  data,\n  columns\n}) => {\n  const exportToCSV = () => {\n    const csv = Papa.unparse(data);\n    const blob = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'dashboard_data.csv');\n  };\n  const exportToExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const blob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\n    });\n    saveAs(blob, 'dashboard_data.xlsx');\n  };\n  const exportToJSON = () => {\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], {\n      type: 'application/json'\n    });\n    saveAs(blob, 'dashboard_data.json');\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Export Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-grid gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          size: \"sm\",\n          onClick: exportToCSV,\n          children: \"Export to CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-success\",\n          size: \"sm\",\n          onClick: exportToExcel,\n          children: \"Export to Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-info\",\n          size: \"sm\",\n          onClick: exportToJSON,\n          children: \"Export to JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = ExportOptions;\nexport default ExportOptions;\nvar _c;\n$RefreshReg$(_c, \"ExportOptions\");","map":{"version":3,"names":["React","Card","Button","saveAs","XLSX","Papa","jsxDEV","_jsxDEV","ExportOptions","data","columns","exportToCSV","csv","unparse","blob","Blob","type","exportToExcel","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","exportToJSON","jsonString","JSON","stringify","className","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","_c","$RefreshReg$"],"sources":["/Users/basil/Data-Dashboard/src/components/ExportOptions.js"],"sourcesContent":["import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\n\nconst ExportOptions = ({ data, columns }) => {\n  const exportToCSV = () => {\n    const csv = Papa.unparse(data);\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'dashboard_data.csv');\n  };\n\n  const exportToExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\n    saveAs(blob, 'dashboard_data.xlsx');\n  };\n\n  const exportToJSON = () => {\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    saveAs(blob, 'dashboard_data.json');\n  };\n\n  return (\n    <Card className=\"mb-4\">\n      <Card.Body>\n        <Card.Title>Export Data</Card.Title>\n        <div className=\"d-grid gap-2\">\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={exportToCSV}>\n            Export to CSV\n          </Button>\n          <Button variant=\"outline-success\" size=\"sm\" onClick={exportToExcel}>\n            Export to Excel\n          </Button>\n          <Button variant=\"outline-info\" size=\"sm\" onClick={exportToJSON}>\n            Export to JSON\n          </Button>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default ExportOptions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}