{"ast":null,"code":"var _jsxFileName = \"/Users/basil/Data-Dashboard/src/components/DataUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { Card, Form, Button } from 'react-bootstrap';\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataUploader = ({\n  onDataUpload\n}) => {\n  _s();\n  const fileInputRef = useRef(null);\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n    if (fileExtension === 'csv') {\n      Papa.parse(file, {\n        header: true,\n        complete: results => {\n          onDataUpload(results.data);\n        },\n        error: error => {\n          console.error('Error parsing CSV:', error);\n          alert('Error parsing CSV file. Please check the format.');\n        }\n      });\n    } else if (['xlsx', 'xls'].includes(fileExtension)) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, {\n            type: 'array'\n          });\n          const sheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[sheetName];\n          const parsedData = XLSX.utils.sheet_to_json(worksheet);\n          onDataUpload(parsedData);\n        } catch (error) {\n          console.error('Error parsing Excel:', error);\n          alert('Error parsing Excel file. Please check the format.');\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      alert('Unsupported file format. Please upload a CSV or Excel file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"data-upload\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Upload Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formFile\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Upload a CSV or Excel file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"file\",\n          accept: \".csv, .xlsx, .xls\",\n          onChange: handleFileUpload,\n          ref: fileInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        size: \"sm\",\n        onClick: () => fileInputRef.current.click(),\n        children: \"Browse Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(DataUploader, \"YQqvMxdmg33cmOXmQcOjJm+FLVI=\");\n_c = DataUploader;\nexport default DataUploader;\nvar _c;\n$RefreshReg$(_c, \"DataUploader\");","map":{"version":3,"names":["React","useRef","Card","Form","Button","Papa","XLSX","jsxDEV","_jsxDEV","DataUploader","onDataUpload","_s","fileInputRef","handleFileUpload","e","file","target","files","fileExtension","name","split","pop","toLowerCase","parse","header","complete","results","data","error","console","alert","includes","reader","FileReader","onload","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","parsedData","utils","sheet_to_json","readAsArrayBuffer","className","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Label","Control","accept","onChange","ref","variant","size","onClick","current","click","_c","$RefreshReg$"],"sources":["/Users/basil/Data-Dashboard/src/components/DataUploader.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { Card, Form, Button } from 'react-bootstrap';\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\n\nconst DataUploader = ({ onDataUpload }) => {\n  const fileInputRef = useRef(null);\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n\n    if (fileExtension === 'csv') {\n      Papa.parse(file, {\n        header: true,\n        complete: (results) => {\n          onDataUpload(results.data);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          alert('Error parsing CSV file. Please check the format.');\n        }\n      });\n    } else if (['xlsx', 'xls'].includes(fileExtension)) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, { type: 'array' });\n          const sheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[sheetName];\n          const parsedData = XLSX.utils.sheet_to_json(worksheet);\n          onDataUpload(parsedData);\n        } catch (error) {\n          console.error('Error parsing Excel:', error);\n          alert('Error parsing Excel file. Please check the format.');\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      alert('Unsupported file format. Please upload a CSV or Excel file.');\n    }\n  };\n\n  return (\n    <Card className=\"data-upload\">\n      <Card.Body>\n        <Card.Title>Upload Data</Card.Title>\n        <Form.Group controlId=\"formFile\" className=\"mb-3\">\n          <Form.Label>Upload a CSV or Excel file</Form.Label>\n          <Form.Control \n            type=\"file\" \n            accept=\".csv, .xlsx, .xls\" \n            onChange={handleFileUpload}\n            ref={fileInputRef}\n          />\n        </Form.Group>\n        <Button \n          variant=\"outline-secondary\" \n          size=\"sm\"\n          onClick={() => fileInputRef.current.click()}\n        >\n          Browse Files\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default DataUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}